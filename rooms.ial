institution rooms;

type Person;
type Role;
type Location;
type Number;
%type NIFluent;

exogenous event enter(Person,Location);
exogenous event leave(Person,Location);

inst event arrive(Person,Location);
inst event exit(Person,Location);
inst event barred(Person,Location);
inst event deniedEntry(Person,Location);
inst event deniedExit(Person,Location);

violation event capacityExceeded(Location);

fluent role(Person,Role);
fluent in_room(Person,Location);
%fluent conflict(Location);
fluent occupancy(Location,Number);
fluent count_type(Location,Role,Number);
fluent max(Location,Number);
fluent min(Location,Number);
fluent addone(Number,Number);
fluent lessone(Number,Number);
fluent smaller(Number,Number);
fluent bigger(Number,Number);
fluent equal(Number,Number);
fluent capacityExceededViol(Location);


noninertial fluent potential_occupant_conflict(Location);
noninertial fluent potential_role_conflict(Location);
noninertial fluent room_conflict(Location);
noninertial fluent permExit(Person,Location);
noninertial fluent permEntry(Person,Location);
%noninertial fluent supports(permExit(P,L)); %need to define a type for them as well
%noninertial fluent lacks(permExit(P,L));
noninertial fluent in_some_room(Person);


%arrive is only generated if you are permitted to enter
enter(P,L) generates arrive(P,L) if permEntry(P,L);
enter(P,L) generates deniedEntry(P,L) if not permEntry(P,L);


%I prefer a fluent rather than an event because so that it is initiated after the nif is calculated (aggregates)
arrive(P,L) generates capacityExceeded(L) if occupancy(L,X), max(L,Y), bigger(X,Y);
arrive(P,L) generates capacityExceeded(L) if occupancy(L,X), max(L,Y), equal(X,Y);


arrive(P,L) initiates in_room(P,L);
arrive(P,L) terminates perm(enter(P,L)), pow(enter(P,L)), perm(arrive(P,L));
arrive(P,L) initiates perm(leave(P,L)), pow(leave(P,L)), perm(exit(P,L));


in_some_room(P) when in_room(P,L);

% this prevents you from having permission to enter any room if you are already in one.
permEntry(P,L) when not in_some_room(P); 

permExit(P,L) when in_room(P,L); 


leave(P,L) generates exit(P,L) if permExit(P,L);
leave(P,L) generates deniedExit(P,L) if not permExit(P,L);

exit(P,L) initiates perm(enter(P,L)), pow(enter(P,L)), perm(arrive(P,L));
exit(P,L) terminates perm(leave(P,L)), pow(leave(P,L)), perm(exit(P,L));
exit(P,L) terminates in_room(P,L);


potential_occupant_conflict(L) when occupancy(L,3);

potential_role_conflict(L) when potential_occupant_conflict(L), in_room(A1,L),in_room(A2,L),in_room(A3,L), role(A1,x), role(A2,y), role(A3,y), A1 != A2, A2 != A3, A1 != A3; 



initially perm(enter(P,L)), pow(enter(P,L)), perm(arrive(P,L)),perm(deniedEntry(P,L)),perm(deniedExit(P,L));


%Doing the counting without the aggregates
arrive(P,L) initiates occupancy(L,X) if occupancy(L,Y), addone(Y,X);
arrive(P,L) initiates count_type(L,R,N) if count_type(L,R,M), role(P,R), addone(M,N);
arrive(P,L) terminates occupancy(L,Y);
arrive(P,L) terminates count_type(L,R,M) if role(P,R);

exit(P,L) initiates occupancy(L,X) if occupancy(L,Y), lessone(Y,X);
exit(P,L) initiates count_type(L,R,N) if count_type(L,R,M), role(P,R), lessone(M,N);
exit(P,L) terminates occupancy(L,Y);
exit(P,L) terminates count_type(L,R,M) if role(P,R);



%viol event initiates the viol fluent
capacityExceeded(L) initiates capacityExceededViol(L);

%I suggest instead (maybe use arithmetic operations from ASP rather than having to define smallerOrNotEqualTo(X,Y);)
%capacityExceeded(Location) when occupancy(L,X), max(L,Y), not smallerOrNotEqualTo(X,Y);





%no longer care about the occupancy of the institution at this stage
%enter(P,L) generates arrive(P,L) if occupancy(L,Y), max(L,N), smaller(Y,N),permEntry(P,L);
%no longer consider occupancy. 
%arrive(P,L) initiates in_room(P,L), occupancy(L,X) if occupancy(L,Y), addone(Y,X);



%occupancy and count type will be handled by the aggregates. 
%if they are just defined at the top and not initiated anywhere, will it still work
%arrive(P,L) initiates count_type(L,R,N) if count_type(L,R,M), role(P,R), addone(M,N);
%arrive(P,L) terminates occupancy(L,Y);
%arrive(P,L) terminates count_type(L,R,M) if role(P,R);


% this prevents you from permission to enter anyroom if your entry will cause conflict but not being dealt with now
%permEntry(P,L) when not occupancy(L,1),not in_some_room(P); 
%permEntry(P,L) when occupancy(L,1), count_type(L,x,1),not role(P,y),not in_some_room(P); 
%permEntry(P,L) when occupancy(L,1), count_type(L,y,1),not role(P,x),not in_some_room(P); 


%update the room occupancy when someone leaves, no longer necessary if aggregates being used. 
%exit(P,L) initiates occupancy(L,X) if occupancy(L,Y), lessone(Y,X);
%exit(P,L) initiates count_type(L,R,N) if count_type(L,R,M), role(P,R), lessone(M,N);

%exit(P,L) terminates occupancy(L,Y),in_room(P,L), count_type(L,R,M) if role(P,R);


%permExit(P,L) when not occupancy(L,3), not count_type(L,y,2),not role(P,y),in_room(P,L); 
%permExit(P,L) when not occupancy(L,3), not count_type(L,y,2),in_room(P,L); 

%these restrictions on leaving because of conflict state no longer being used for now
%permExit(P,L) when not occupancy(L,3),in_room(P,L); 
%permExit(P,L) when occupancy(L,3), not count_type(L,y,2),in_room(P,L); 
%permExit(P,L) when occupancy(L,3), count_type(L,y,2),not role(P,y),in_room(P,L); 



%potential_role_conflict(L) terminates perm(leave(P,L)) if in_room(P,L), role(P,y);

%potential_occupant_conflict(L) when in_room(P,L),in_room(P1,L),in_room(P2,L),P!=P1,P!=P2,P1!=P2;

%exit(P,L) initiates conflict(L) if potential_occupant_conflict(L), not in_room(P2,L),P2!=P;


initially addone(0,1), addone(1,2), addone(2,3), addone(3,4), addone(4,5);
initially lessone(1,0), lessone(2,1), lessone(3,2), lessone(4,3), lessone(5,4);
initially smaller(0,5), smaller(1,5), smaller(2,5), smaller(3,5), smaller(4,5);
initially smaller(0,3), smaller(1,3), smaller(2,3);
initially bigger(5,0), bigger(5,1), bigger(5,2), bigger(5,3), bigger(5,4);
initially bigger(3,0), bigger(3,1), bigger(3,2);
initially bigger(4,0), bigger(4,1), bigger(4,2), bigger(4,3);
initially bigger(2,1), bigger(2,0);
initially equal(1,1), equal(2,2),equal(3,3),equal(4,4),equal(5,5);

