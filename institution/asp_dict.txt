{'bridge_asp': [], 'institution_asp': [{'file': <tempfile._TemporaryFileWrapper object at 0x7feb04891048>, 'contents': "%\n% -------------------------------PART 1-------------------------------\n%\n%\n% Standard prelude for rooms\n%\n% Standard prelude now dealt with in InstalModel.\n%\n% Rules for Institution rooms\n%\n  ifluent(live(rooms), rooms).\n  fluent(live(rooms), rooms).\n  inst(rooms).\n  :- not _preludeLoaded. \n\n%\n% Exogenous events\n% Event: leave (type: ex)\n  event(leave(Person0,Location1)) :- person(Person0),location(Location1).\n  evtype(leave(Person0,Location1),rooms,ex) :- person(Person0),location(Location1).\n  evinst(leave(Person0,Location1),rooms) :- person(Person0),location(Location1).\n  ifluent(pow(leave(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  ifluent(perm(leave(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  fluent(pow(leave(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  fluent(perm(leave(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  event(viol(leave(Person0,Location1))) :- person(Person0),location(Location1).\n  evtype(viol(leave(Person0,Location1)), rooms, viol) :- person(Person0),location(Location1).\n  evinst(viol(leave(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n% Event: enter (type: ex)\n  event(enter(Person0,Location1)) :- person(Person0),location(Location1).\n  evtype(enter(Person0,Location1),rooms,ex) :- person(Person0),location(Location1).\n  evinst(enter(Person0,Location1),rooms) :- person(Person0),location(Location1).\n  ifluent(pow(enter(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  ifluent(perm(enter(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  fluent(pow(enter(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  fluent(perm(enter(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  event(viol(enter(Person0,Location1))) :- person(Person0),location(Location1).\n  evtype(viol(enter(Person0,Location1)), rooms, viol) :- person(Person0),location(Location1).\n  evinst(viol(enter(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n%\n% null event for unknown events\n% Event: null (type: ex)\n  event(null).\n  evtype(null,rooms,ex).\n  evinst(null,rooms).\n  ifluent(pow(null),rooms).\n  ifluent(perm(null),rooms).\n  fluent(pow(null),rooms).\n  fluent(perm(null),rooms).\n  event(viol(null)).\n  evtype(viol(null),rooms,viol).\n  evinst(viol(null),rooms).\n% Institutional events\n% Event: deniedExit (type: in)\n  event(deniedExit(Person0,Location1)) :- person(Person0),location(Location1).\n  evtype(deniedExit(Person0,Location1),rooms,inst) :- person(Person0),location(Location1).\n  evinst(deniedExit(Person0,Location1),rooms) :- person(Person0),location(Location1).\n  ifluent(perm(deniedExit(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  fluent(perm(deniedExit(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  event(viol(deniedExit(Person0,Location1))) :- person(Person0),location(Location1).\n  evtype(viol(deniedExit(Person0,Location1)),rooms,viol) :- person(Person0),location(Location1).\n  evinst(viol(deniedExit(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n% Event: deniedEntry (type: in)\n  event(deniedEntry(Person0,Location1)) :- person(Person0),location(Location1).\n  evtype(deniedEntry(Person0,Location1),rooms,inst) :- person(Person0),location(Location1).\n  evinst(deniedEntry(Person0,Location1),rooms) :- person(Person0),location(Location1).\n  ifluent(perm(deniedEntry(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  fluent(perm(deniedEntry(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  event(viol(deniedEntry(Person0,Location1))) :- person(Person0),location(Location1).\n  evtype(viol(deniedEntry(Person0,Location1)),rooms,viol) :- person(Person0),location(Location1).\n  evinst(viol(deniedEntry(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n% Event: exit (type: in)\n  event(exit(Person0,Location1)) :- person(Person0),location(Location1).\n  evtype(exit(Person0,Location1),rooms,inst) :- person(Person0),location(Location1).\n  evinst(exit(Person0,Location1),rooms) :- person(Person0),location(Location1).\n  ifluent(perm(exit(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  fluent(perm(exit(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  event(viol(exit(Person0,Location1))) :- person(Person0),location(Location1).\n  evtype(viol(exit(Person0,Location1)),rooms,viol) :- person(Person0),location(Location1).\n  evinst(viol(exit(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n% Event: arrive (type: in)\n  event(arrive(Person0,Location1)) :- person(Person0),location(Location1).\n  evtype(arrive(Person0,Location1),rooms,inst) :- person(Person0),location(Location1).\n  evinst(arrive(Person0,Location1),rooms) :- person(Person0),location(Location1).\n  ifluent(perm(arrive(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  fluent(perm(arrive(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  event(viol(arrive(Person0,Location1))) :- person(Person0),location(Location1).\n  evtype(viol(arrive(Person0,Location1)),rooms,viol) :- person(Person0),location(Location1).\n  evinst(viol(arrive(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n%\n% Violation events\n%\n%\n% Creation events\n%\n%\n% Dissolution events\n%\n%\n% dissolve events\n%\n%\n% inertial fluents\n%\nifluent(in_room(Person0,Location1),rooms) :-\n  person(Person0),location(Location1).\nfluent(in_room(Person0,Location1),rooms) :-\n  person(Person0),location(Location1).\n\nifluent(role(Person0,Role1),rooms) :-\n  person(Person0),role(Role1).\nfluent(role(Person0,Role1),rooms) :-\n  person(Person0),role(Role1).\n\nifluent(revise,rooms) :-\n  true.\nfluent(revise,rooms) :-\n  true.\n\nifluent(equal(Number0,Number1),rooms) :-\n  number(Number0),number(Number1).\nfluent(equal(Number0,Number1),rooms) :-\n  number(Number0),number(Number1).\n\nifluent(vip_room(Location0),rooms) :-\n  location(Location0).\nfluent(vip_room(Location0),rooms) :-\n  location(Location0).\n\nifluent(is_vip(Person0),rooms) :-\n  person(Person0).\nfluent(is_vip(Person0),rooms) :-\n  person(Person0).\n\nifluent(aggrCount(Number0),rooms) :-\n  number(Number0).\nfluent(aggrCount(Number0),rooms) :-\n  number(Number0).\n\nifluent(bigger(Number0,Number1),rooms) :-\n  number(Number0),number(Number1).\nfluent(bigger(Number0,Number1),rooms) :-\n  number(Number0),number(Number1).\n\nifluent(max(Location0,Number1),rooms) :-\n  location(Location0),number(Number1).\nfluent(max(Location0,Number1),rooms) :-\n  location(Location0),number(Number1).\n\n%\n% noninertial fluents\n%\nnifluent(vip_in_room(Location0), rooms) :-\n  location(Location0).\nfluent(vip_in_room(Location0), rooms) :-\n  location(Location0).\n\nnifluent(typeCount(Location0,Role1,Number2), rooms) :-\n  location(Location0),role(Role1),number(Number2).\nfluent(typeCount(Location0,Role1,Number2), rooms) :-\n  location(Location0),role(Role1),number(Number2).\n\nnifluent(roomTypeConflictViol(Location0), rooms) :-\n  location(Location0).\nfluent(roomTypeConflictViol(Location0), rooms) :-\n  location(Location0).\n\nnifluent(permExit(Person0,Location1), rooms) :-\n  person(Person0),location(Location1).\nfluent(permExit(Person0,Location1), rooms) :-\n  person(Person0),location(Location1).\n\nnifluent(capacityExceededViol(Location0), rooms) :-\n  location(Location0).\nfluent(capacityExceededViol(Location0), rooms) :-\n  location(Location0).\n\nnifluent(potential_role_conflict(Location0), rooms) :-\n  location(Location0).\nfluent(potential_role_conflict(Location0), rooms) :-\n  location(Location0).\n\nnifluent(earlyBirdViol(Person0,Location1), rooms) :-\n  person(Person0),location(Location1).\nfluent(earlyBirdViol(Person0,Location1), rooms) :-\n  person(Person0),location(Location1).\n\nnifluent(potential_occupant_conflict(Location0), rooms) :-\n  location(Location0).\nfluent(potential_occupant_conflict(Location0), rooms) :-\n  location(Location0).\n\nnifluent(in_some_room(Person0), rooms) :-\n  person(Person0).\nfluent(in_some_room(Person0), rooms) :-\n  person(Person0).\n\nnifluent(occupancy(Location0,Number1), rooms) :-\n  location(Location0),number(Number1).\nfluent(occupancy(Location0,Number1), rooms) :-\n  location(Location0),number(Number1).\n\nnifluent(restrictAccess(Person0,Location1), rooms) :-\n  person(Person0),location(Location1).\nfluent(restrictAccess(Person0,Location1), rooms) :-\n  person(Person0),location(Location1).\n\nnifluent(permEntry(Person0,Location1), rooms) :-\n  person(Person0),location(Location1).\nfluent(permEntry(Person0,Location1), rooms) :-\n  person(Person0),location(Location1).\n\nnifluent(non_vip_in_vip_room(Location0), rooms) :-\n  location(Location0).\nfluent(non_vip_in_vip_room(Location0), rooms) :-\n  location(Location0).\n\n%\n% violation fluents (to be implemented)\n\n%\n% obligation fluents\n%\n%\n% -------------------------------PART 2-------------------------------\n%\n%\n% generate rules\n%\n%\n% Translation of leave(P,L) generates deniedExit(P,L) if ['not', ['permExit', ['P', 'L']]] in \noccurred(deniedExit(P,L),rooms,I) :- occurred(leave(P,L),rooms,I),not occurred(viol(leave(P,L)),rooms,I),\n\n   not\n   holdsat(permExit(P,L),rooms,_,I),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of leave(P,L) generates exit(P,L) if ['permExit', ['P', 'L']] in \noccurred(exit(P,L),rooms,I) :- occurred(leave(P,L),rooms,I),not occurred(viol(leave(P,L)),rooms,I),\n\n   holdsat(permExit(P,L),rooms,_,I),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of enter(P,L) generates deniedEntry(P,L) if ['not', ['permEntry', ['P', 'L']]] in \noccurred(deniedEntry(P,L),rooms,I) :- occurred(enter(P,L),rooms,I),not occurred(viol(enter(P,L)),rooms,I),\n\n   not\n   holdsat(permEntry(P,L),rooms,_,I),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of enter(P,L) generates arrive(P,L) if ['and', ['permEntry', ['P', 'L']], ['revise', []]] in \noccurred(arrive(P,L),rooms,I) :- occurred(enter(P,L),rooms,I),not occurred(viol(enter(P,L)),rooms,I),\n\n   holdsat(permEntry(P,L),rooms,_,I),\n   holdsat(revise,rooms,_,I),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% initiate rules\n%\n%\n% Translation of exit(P,L) initiates ['perm', ['arrive', ['P', 'L']]] if []\n%\ninitiated(perm(arrive(P,L)),rooms,exit(P,L),I) :-\n   occurred(exit(P,L),rooms,I),\n   not occurred(viol(exit(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of exit(P,L) initiates ['pow', ['enter', ['P', 'L']]] if []\n%\ninitiated(pow(enter(P,L)),rooms,exit(P,L),I) :-\n   occurred(exit(P,L),rooms,I),\n   not occurred(viol(exit(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of exit(P,L) initiates ['perm', ['enter', ['P', 'L']]] if []\n%\ninitiated(perm(enter(P,L)),rooms,exit(P,L),I) :-\n   occurred(exit(P,L),rooms,I),\n   not occurred(viol(exit(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of arrive(P,L) initiates ['perm', ['exit', ['P', 'L']]] if []\n%\ninitiated(perm(exit(P,L)),rooms,arrive(P,L),I) :-\n   occurred(arrive(P,L),rooms,I),\n   not occurred(viol(arrive(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of arrive(P,L) initiates ['pow', ['leave', ['P', 'L']]] if []\n%\ninitiated(pow(leave(P,L)),rooms,arrive(P,L),I) :-\n   occurred(arrive(P,L),rooms,I),\n   not occurred(viol(arrive(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of arrive(P,L) initiates ['perm', ['leave', ['P', 'L']]] if []\n%\ninitiated(perm(leave(P,L)),rooms,arrive(P,L),I) :-\n   occurred(arrive(P,L),rooms,I),\n   not occurred(viol(arrive(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of arrive(P,L) initiates ['in_room', ['P', 'L']] if ['revise', []]\n%\ninitiated(in_room(P,L),rooms,arrive(P,L),I) :-\n   occurred(arrive(P,L),rooms,I),\n   not occurred(viol(arrive(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   holdsat(revise,rooms,_,I),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% terminate rules\n%\n%\n% Translation of exit(P,L) terminates ['in_room', ['P', 'L']] if []\n%\nterminated(in_room(P,L),rooms,exit(P,L),I) :-\n   occurred(exit(P,L),rooms,I),\n   not occurred(viol(exit(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of exit(P,L) terminates ['perm', ['exit', ['P', 'L']]] if []\n%\nterminated(perm(exit(P,L)),rooms,exit(P,L),I) :-\n   occurred(exit(P,L),rooms,I),\n   not occurred(viol(exit(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of exit(P,L) terminates ['pow', ['leave', ['P', 'L']]] if []\n%\nterminated(pow(leave(P,L)),rooms,exit(P,L),I) :-\n   occurred(exit(P,L),rooms,I),\n   not occurred(viol(exit(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of exit(P,L) terminates ['perm', ['leave', ['P', 'L']]] if []\n%\nterminated(perm(leave(P,L)),rooms,exit(P,L),I) :-\n   occurred(exit(P,L),rooms,I),\n   not occurred(viol(exit(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of arrive(P,L) terminates ['perm', ['arrive', ['P', 'L']]] if []\n%\nterminated(perm(arrive(P,L)),rooms,arrive(P,L),I) :-\n   occurred(arrive(P,L),rooms,I),\n   not occurred(viol(arrive(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of arrive(P,L) terminates ['pow', ['enter', ['P', 'L']]] if []\n%\nterminated(pow(enter(P,L)),rooms,arrive(P,L),I) :-\n   occurred(arrive(P,L),rooms,I),\n   not occurred(viol(arrive(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of arrive(P,L) terminates ['perm', ['enter', ['P', 'L']]] if ['revise', []]\n%\nterminated(perm(enter(P,L)),rooms,arrive(P,L),I) :-\n   occurred(arrive(P,L),rooms,I),\n   not occurred(viol(arrive(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   holdsat(revise,rooms,_,I),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% noninertial rules\n%\n%\n% Translation of non_vip_in_vip_room(L) when ['and', ['and', ['vip_room', ['L']], ['in_room', ['P', 'L']]], ['not', ['is_vip', ['P']]]]\nholdsat(non_vip_in_vip_room(L),rooms,nif,I) :-\n   holdsat(vip_room(L),rooms,_,I),\n   holdsat(in_room(P,L),rooms,_,I),\n   not\n   holdsat(is_vip(P),rooms,_,I),\n   location(L),\n   person(P),\n   inst(rooms), instant(I).\n%\n% Translation of vip_in_room(L) when ['and', ['in_room', ['P', 'L']], ['is_vip', ['P']]]\nholdsat(vip_in_room(L),rooms,nif,I) :-\n   holdsat(in_room(P,L),rooms,_,I),\n   holdsat(is_vip(P),rooms,_,I),\n   location(L),\n   person(P),\n   inst(rooms), instant(I).\n%\n% Translation of capacityExceededViol(L) when ['and', ['and', ['and', ['occupancy', ['L', 'X']], ['max', ['L', 'Y']]], ['bigger', ['X', 'Y']]], ['revise', []]]\nholdsat(capacityExceededViol(L),rooms,nif,I) :-\n   holdsat(occupancy(L,X),rooms,_,I),\n   holdsat(max(L,Y),rooms,_,I),\n   holdsat(bigger(X,Y),rooms,_,I),\n   holdsat(revise,rooms,_,I),\n   location(L),\n   number(X),\n   number(Y),\n   inst(rooms), instant(I).\n%\n% Translation of typeCount(L,R,N) when ['and', ['and', ['aggrCount', ['N']], ['in_room', ['P', 'L']]], ['role', ['P', 'R']]]\nholdsat(typeCount(L,R,N),rooms,nif,I) :-\n N = #count {P: \n holdsat(in_room(P,L),rooms,_,I),\n holdsat(role(P,R),rooms,_,I) },\n   number(N),\n   role(R),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of occupancy(L,N) when ['and', ['aggrCount', ['N']], ['in_room', ['P', 'L']]]\nholdsat(occupancy(L,N),rooms,nif,I) :-\n N = #count {P: \n holdsat(in_room(P,L),rooms,_,I) },\n   number(N),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of potential_role_conflict(L) when ['and', ['potential_occupant_conflict', ['L']], ['typeCount', ['L', 'R', '2']]]\nholdsat(potential_role_conflict(L),rooms,nif,I) :-\n   holdsat(potential_occupant_conflict(L),rooms,_,I),\n   holdsat(typeCount(L,R,2),rooms,_,I),\n   location(L),\n   role(R),\n   inst(rooms), instant(I).\n%\n% Translation of potential_occupant_conflict(L) when ['occupancy', ['L', '3']]\nholdsat(potential_occupant_conflict(L),rooms,nif,I) :-\n   holdsat(occupancy(L,3),rooms,_,I),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of restrictAccess(P,L) when ['and', ['vip_room', ['L']], ['revise', []]]\nholdsat(restrictAccess(P,L),rooms,nif,I) :-\n   holdsat(vip_room(L),rooms,_,I),\n   holdsat(revise,rooms,_,I),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of permExit(P,L) when ['in_room', ['P', 'L']]\nholdsat(permExit(P,L),rooms,nif,I) :-\n   holdsat(in_room(P,L),rooms,_,I),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of permEntry(P,L) when ['and', ['not', ['in_some_room', ['P']]], ['not', ['restrictAccess', ['P', 'L']]]]\nholdsat(permEntry(P,L),rooms,nif,I) :-\n   not\n   holdsat(in_some_room(P),rooms,_,I),\n   not\n   holdsat(restrictAccess(P,L),rooms,_,I),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of in_some_room(P) when ['in_room', ['P', 'L']]\nholdsat(in_some_room(P),rooms,nif,I) :-\n   holdsat(in_room(P,L),rooms,_,I),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% -------------------------------PART 3-------------------------------\n%\n%\n% initially\n%\n% no creation event\nholdsat(live(rooms),rooms,_create_,I) :- start(I), inst(rooms).\nholdsat(perm(null),rooms,_create_,I) :- start(I), inst(rooms).\nholdsat(pow(null),rooms,_create_,I) :- start(I), inst(rooms).\n% initially: perm(enter(P,L))\nholdsat(perm(enter(P,L)),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   person(P),\n   location(L),\n   inst(rooms), start(I).\n% initially: pow(enter(P,L))\nholdsat(pow(enter(P,L)),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   person(P),\n   location(L),\n   inst(rooms), start(I).\n% initially: perm(arrive(P,L))\nholdsat(perm(arrive(P,L)),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   person(P),\n   location(L),\n   inst(rooms), start(I).\n% initially: perm(deniedEntry(P,L))\nholdsat(perm(deniedEntry(P,L)),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   person(P),\n   location(L),\n   inst(rooms), start(I).\n% initially: perm(deniedExit(P,L))\nholdsat(perm(deniedExit(P,L)),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   person(P),\n   location(L),\n   inst(rooms), start(I).\n% initially: bigger(10,0)\nholdsat(bigger(10,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(10,1)\nholdsat(bigger(10,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(10,2)\nholdsat(bigger(10,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(10,3)\nholdsat(bigger(10,3),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(10,4)\nholdsat(bigger(10,4),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(10,5)\nholdsat(bigger(10,5),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(10,6)\nholdsat(bigger(10,6),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(10,7)\nholdsat(bigger(10,7),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(10,8)\nholdsat(bigger(10,8),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(10,9)\nholdsat(bigger(10,9),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(9,0)\nholdsat(bigger(9,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(9,1)\nholdsat(bigger(9,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(9,2)\nholdsat(bigger(9,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(9,3)\nholdsat(bigger(9,3),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(9,4)\nholdsat(bigger(9,4),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(9,5)\nholdsat(bigger(9,5),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(9,6)\nholdsat(bigger(9,6),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(9,7)\nholdsat(bigger(9,7),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(9,8)\nholdsat(bigger(9,8),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(8,0)\nholdsat(bigger(8,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(8,1)\nholdsat(bigger(8,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(8,2)\nholdsat(bigger(8,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(8,3)\nholdsat(bigger(8,3),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(8,4)\nholdsat(bigger(8,4),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(8,5)\nholdsat(bigger(8,5),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(8,6)\nholdsat(bigger(8,6),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(8,7)\nholdsat(bigger(8,7),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(7,0)\nholdsat(bigger(7,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(7,1)\nholdsat(bigger(7,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(7,2)\nholdsat(bigger(7,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(7,3)\nholdsat(bigger(7,3),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(7,4)\nholdsat(bigger(7,4),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(7,5)\nholdsat(bigger(7,5),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(7,6)\nholdsat(bigger(7,6),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(6,0)\nholdsat(bigger(6,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(6,1)\nholdsat(bigger(6,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(6,2)\nholdsat(bigger(6,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(6,3)\nholdsat(bigger(6,3),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(6,4)\nholdsat(bigger(6,4),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(6,5)\nholdsat(bigger(6,5),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(5,0)\nholdsat(bigger(5,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(5,1)\nholdsat(bigger(5,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(5,2)\nholdsat(bigger(5,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(5,3)\nholdsat(bigger(5,3),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(5,4)\nholdsat(bigger(5,4),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(3,0)\nholdsat(bigger(3,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(3,1)\nholdsat(bigger(3,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(3,2)\nholdsat(bigger(3,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(4,0)\nholdsat(bigger(4,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(4,1)\nholdsat(bigger(4,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(4,2)\nholdsat(bigger(4,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(4,3)\nholdsat(bigger(4,3),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(2,1)\nholdsat(bigger(2,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(2,0)\nholdsat(bigger(2,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(1,0)\nholdsat(bigger(1,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: equal(1,1)\nholdsat(equal(1,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: equal(2,2)\nholdsat(equal(2,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: equal(3,3)\nholdsat(equal(3,3),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: equal(4,4)\nholdsat(equal(4,4),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: equal(5,5)\nholdsat(equal(5,5),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: is_vip(oracle)\nholdsat(is_vip(oracle),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: revise\nholdsat(revise,rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n%\n% -------------------------------GROUNDING-------------------------------\n%\n% Person\n_typeNotDeclared :- not person(_).\n#program person(l).\nperson(l).\n\n% Location\n_typeNotDeclared :- not location(_).\n#program location(l).\nlocation(l).\n\n% Number\n_typeNotDeclared :- not number(_).\n#program number(l).\nnumber(l).\n\n% Role\n_typeNotDeclared :- not role(_).\n#program role(l).\nrole(l).\n\n%\n% End of file\n%\n%\n% -------------------------------PART 1-------------------------------\n%\n%\n% Standard prelude for rooms\n%\n% Standard prelude now dealt with in InstalModel.\n%\n% Rules for Institution rooms\n%\n  ifluent(live(rooms), rooms).\n  fluent(live(rooms), rooms).\n  inst(rooms).\n  :- not _preludeLoaded. \n\n%\n% Exogenous events\n% Event: leave (type: ex)\n  event(leave(Person0,Location1)) :- person(Person0),location(Location1).\n  evtype(leave(Person0,Location1),rooms,ex) :- person(Person0),location(Location1).\n  evinst(leave(Person0,Location1),rooms) :- person(Person0),location(Location1).\n  ifluent(pow(leave(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  ifluent(perm(leave(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  fluent(pow(leave(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  fluent(perm(leave(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  event(viol(leave(Person0,Location1))) :- person(Person0),location(Location1).\n  evtype(viol(leave(Person0,Location1)), rooms, viol) :- person(Person0),location(Location1).\n  evinst(viol(leave(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n% Event: enter (type: ex)\n  event(enter(Person0,Location1)) :- person(Person0),location(Location1).\n  evtype(enter(Person0,Location1),rooms,ex) :- person(Person0),location(Location1).\n  evinst(enter(Person0,Location1),rooms) :- person(Person0),location(Location1).\n  ifluent(pow(enter(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  ifluent(perm(enter(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  fluent(pow(enter(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  fluent(perm(enter(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  event(viol(enter(Person0,Location1))) :- person(Person0),location(Location1).\n  evtype(viol(enter(Person0,Location1)), rooms, viol) :- person(Person0),location(Location1).\n  evinst(viol(enter(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n%\n% null event for unknown events\n% Event: null (type: ex)\n  event(null).\n  evtype(null,rooms,ex).\n  evinst(null,rooms).\n  ifluent(pow(null),rooms).\n  ifluent(perm(null),rooms).\n  fluent(pow(null),rooms).\n  fluent(perm(null),rooms).\n  event(viol(null)).\n  evtype(viol(null),rooms,viol).\n  evinst(viol(null),rooms).\n% Institutional events\n% Event: deniedExit (type: in)\n  event(deniedExit(Person0,Location1)) :- person(Person0),location(Location1).\n  evtype(deniedExit(Person0,Location1),rooms,inst) :- person(Person0),location(Location1).\n  evinst(deniedExit(Person0,Location1),rooms) :- person(Person0),location(Location1).\n  ifluent(perm(deniedExit(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  fluent(perm(deniedExit(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  event(viol(deniedExit(Person0,Location1))) :- person(Person0),location(Location1).\n  evtype(viol(deniedExit(Person0,Location1)),rooms,viol) :- person(Person0),location(Location1).\n  evinst(viol(deniedExit(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n% Event: deniedEntry (type: in)\n  event(deniedEntry(Person0,Location1)) :- person(Person0),location(Location1).\n  evtype(deniedEntry(Person0,Location1),rooms,inst) :- person(Person0),location(Location1).\n  evinst(deniedEntry(Person0,Location1),rooms) :- person(Person0),location(Location1).\n  ifluent(perm(deniedEntry(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  fluent(perm(deniedEntry(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  event(viol(deniedEntry(Person0,Location1))) :- person(Person0),location(Location1).\n  evtype(viol(deniedEntry(Person0,Location1)),rooms,viol) :- person(Person0),location(Location1).\n  evinst(viol(deniedEntry(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n% Event: exit (type: in)\n  event(exit(Person0,Location1)) :- person(Person0),location(Location1).\n  evtype(exit(Person0,Location1),rooms,inst) :- person(Person0),location(Location1).\n  evinst(exit(Person0,Location1),rooms) :- person(Person0),location(Location1).\n  ifluent(perm(exit(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  fluent(perm(exit(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  event(viol(exit(Person0,Location1))) :- person(Person0),location(Location1).\n  evtype(viol(exit(Person0,Location1)),rooms,viol) :- person(Person0),location(Location1).\n  evinst(viol(exit(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n% Event: arrive (type: in)\n  event(arrive(Person0,Location1)) :- person(Person0),location(Location1).\n  evtype(arrive(Person0,Location1),rooms,inst) :- person(Person0),location(Location1).\n  evinst(arrive(Person0,Location1),rooms) :- person(Person0),location(Location1).\n  ifluent(perm(arrive(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  fluent(perm(arrive(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n  event(viol(arrive(Person0,Location1))) :- person(Person0),location(Location1).\n  evtype(viol(arrive(Person0,Location1)),rooms,viol) :- person(Person0),location(Location1).\n  evinst(viol(arrive(Person0,Location1)),rooms) :- person(Person0),location(Location1).\n%\n% Violation events\n%\n%\n% Creation events\n%\n%\n% Dissolution events\n%\n%\n% dissolve events\n%\n%\n% inertial fluents\n%\nifluent(in_room(Person0,Location1),rooms) :-\n  person(Person0),location(Location1).\nfluent(in_room(Person0,Location1),rooms) :-\n  person(Person0),location(Location1).\n\nifluent(role(Person0,Role1),rooms) :-\n  person(Person0),role(Role1).\nfluent(role(Person0,Role1),rooms) :-\n  person(Person0),role(Role1).\n\nifluent(revise,rooms) :-\n  true.\nfluent(revise,rooms) :-\n  true.\n\nifluent(equal(Number0,Number1),rooms) :-\n  number(Number0),number(Number1).\nfluent(equal(Number0,Number1),rooms) :-\n  number(Number0),number(Number1).\n\nifluent(vip_room(Location0),rooms) :-\n  location(Location0).\nfluent(vip_room(Location0),rooms) :-\n  location(Location0).\n\nifluent(is_vip(Person0),rooms) :-\n  person(Person0).\nfluent(is_vip(Person0),rooms) :-\n  person(Person0).\n\nifluent(aggrCount(Number0),rooms) :-\n  number(Number0).\nfluent(aggrCount(Number0),rooms) :-\n  number(Number0).\n\nifluent(bigger(Number0,Number1),rooms) :-\n  number(Number0),number(Number1).\nfluent(bigger(Number0,Number1),rooms) :-\n  number(Number0),number(Number1).\n\nifluent(max(Location0,Number1),rooms) :-\n  location(Location0),number(Number1).\nfluent(max(Location0,Number1),rooms) :-\n  location(Location0),number(Number1).\n\n%\n% noninertial fluents\n%\nnifluent(vip_in_room(Location0), rooms) :-\n  location(Location0).\nfluent(vip_in_room(Location0), rooms) :-\n  location(Location0).\n\nnifluent(typeCount(Location0,Role1,Number2), rooms) :-\n  location(Location0),role(Role1),number(Number2).\nfluent(typeCount(Location0,Role1,Number2), rooms) :-\n  location(Location0),role(Role1),number(Number2).\n\nnifluent(roomTypeConflictViol(Location0), rooms) :-\n  location(Location0).\nfluent(roomTypeConflictViol(Location0), rooms) :-\n  location(Location0).\n\nnifluent(permExit(Person0,Location1), rooms) :-\n  person(Person0),location(Location1).\nfluent(permExit(Person0,Location1), rooms) :-\n  person(Person0),location(Location1).\n\nnifluent(capacityExceededViol(Location0), rooms) :-\n  location(Location0).\nfluent(capacityExceededViol(Location0), rooms) :-\n  location(Location0).\n\nnifluent(potential_role_conflict(Location0), rooms) :-\n  location(Location0).\nfluent(potential_role_conflict(Location0), rooms) :-\n  location(Location0).\n\nnifluent(earlyBirdViol(Person0,Location1), rooms) :-\n  person(Person0),location(Location1).\nfluent(earlyBirdViol(Person0,Location1), rooms) :-\n  person(Person0),location(Location1).\n\nnifluent(potential_occupant_conflict(Location0), rooms) :-\n  location(Location0).\nfluent(potential_occupant_conflict(Location0), rooms) :-\n  location(Location0).\n\nnifluent(in_some_room(Person0), rooms) :-\n  person(Person0).\nfluent(in_some_room(Person0), rooms) :-\n  person(Person0).\n\nnifluent(occupancy(Location0,Number1), rooms) :-\n  location(Location0),number(Number1).\nfluent(occupancy(Location0,Number1), rooms) :-\n  location(Location0),number(Number1).\n\nnifluent(restrictAccess(Person0,Location1), rooms) :-\n  person(Person0),location(Location1).\nfluent(restrictAccess(Person0,Location1), rooms) :-\n  person(Person0),location(Location1).\n\nnifluent(permEntry(Person0,Location1), rooms) :-\n  person(Person0),location(Location1).\nfluent(permEntry(Person0,Location1), rooms) :-\n  person(Person0),location(Location1).\n\nnifluent(non_vip_in_vip_room(Location0), rooms) :-\n  location(Location0).\nfluent(non_vip_in_vip_room(Location0), rooms) :-\n  location(Location0).\n\n%\n% violation fluents (to be implemented)\n\n%\n% obligation fluents\n%\n%\n% -------------------------------PART 2-------------------------------\n%\n%\n% generate rules\n%\n%\n% Translation of leave(P,L) generates deniedExit(P,L) if ['not', ['permExit', ['P', 'L']]] in \noccurred(deniedExit(P,L),rooms,I) :- occurred(leave(P,L),rooms,I),not occurred(viol(leave(P,L)),rooms,I),\n\n   not\n   holdsat(permExit(P,L),rooms,_,I),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of leave(P,L) generates exit(P,L) if ['permExit', ['P', 'L']] in \noccurred(exit(P,L),rooms,I) :- occurred(leave(P,L),rooms,I),not occurred(viol(leave(P,L)),rooms,I),\n\n   holdsat(permExit(P,L),rooms,_,I),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of enter(P,L) generates deniedEntry(P,L) if ['not', ['permEntry', ['P', 'L']]] in \noccurred(deniedEntry(P,L),rooms,I) :- occurred(enter(P,L),rooms,I),not occurred(viol(enter(P,L)),rooms,I),\n\n   not\n   holdsat(permEntry(P,L),rooms,_,I),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of enter(P,L) generates arrive(P,L) if ['and', ['permEntry', ['P', 'L']], ['revise', []]] in \noccurred(arrive(P,L),rooms,I) :- occurred(enter(P,L),rooms,I),not occurred(viol(enter(P,L)),rooms,I),\n\n   holdsat(permEntry(P,L),rooms,_,I),\n   holdsat(revise,rooms,_,I),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% initiate rules\n%\n%\n% Translation of exit(P,L) initiates ['perm', ['arrive', ['P', 'L']]] if []\n%\ninitiated(perm(arrive(P,L)),rooms,exit(P,L),I) :-\n   occurred(exit(P,L),rooms,I),\n   not occurred(viol(exit(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of exit(P,L) initiates ['pow', ['enter', ['P', 'L']]] if []\n%\ninitiated(pow(enter(P,L)),rooms,exit(P,L),I) :-\n   occurred(exit(P,L),rooms,I),\n   not occurred(viol(exit(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of exit(P,L) initiates ['perm', ['enter', ['P', 'L']]] if []\n%\ninitiated(perm(enter(P,L)),rooms,exit(P,L),I) :-\n   occurred(exit(P,L),rooms,I),\n   not occurred(viol(exit(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of arrive(P,L) initiates ['perm', ['exit', ['P', 'L']]] if []\n%\ninitiated(perm(exit(P,L)),rooms,arrive(P,L),I) :-\n   occurred(arrive(P,L),rooms,I),\n   not occurred(viol(arrive(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of arrive(P,L) initiates ['pow', ['leave', ['P', 'L']]] if []\n%\ninitiated(pow(leave(P,L)),rooms,arrive(P,L),I) :-\n   occurred(arrive(P,L),rooms,I),\n   not occurred(viol(arrive(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of arrive(P,L) initiates ['perm', ['leave', ['P', 'L']]] if []\n%\ninitiated(perm(leave(P,L)),rooms,arrive(P,L),I) :-\n   occurred(arrive(P,L),rooms,I),\n   not occurred(viol(arrive(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of arrive(P,L) initiates ['in_room', ['P', 'L']] if ['revise', []]\n%\ninitiated(in_room(P,L),rooms,arrive(P,L),I) :-\n   occurred(arrive(P,L),rooms,I),\n   not occurred(viol(arrive(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   holdsat(revise,rooms,_,I),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% terminate rules\n%\n%\n% Translation of exit(P,L) terminates ['in_room', ['P', 'L']] if []\n%\nterminated(in_room(P,L),rooms,exit(P,L),I) :-\n   occurred(exit(P,L),rooms,I),\n   not occurred(viol(exit(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of exit(P,L) terminates ['perm', ['exit', ['P', 'L']]] if []\n%\nterminated(perm(exit(P,L)),rooms,exit(P,L),I) :-\n   occurred(exit(P,L),rooms,I),\n   not occurred(viol(exit(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of exit(P,L) terminates ['pow', ['leave', ['P', 'L']]] if []\n%\nterminated(pow(leave(P,L)),rooms,exit(P,L),I) :-\n   occurred(exit(P,L),rooms,I),\n   not occurred(viol(exit(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of exit(P,L) terminates ['perm', ['leave', ['P', 'L']]] if []\n%\nterminated(perm(leave(P,L)),rooms,exit(P,L),I) :-\n   occurred(exit(P,L),rooms,I),\n   not occurred(viol(exit(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of arrive(P,L) terminates ['perm', ['arrive', ['P', 'L']]] if []\n%\nterminated(perm(arrive(P,L)),rooms,arrive(P,L),I) :-\n   occurred(arrive(P,L),rooms,I),\n   not occurred(viol(arrive(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of arrive(P,L) terminates ['pow', ['enter', ['P', 'L']]] if []\n%\nterminated(pow(enter(P,L)),rooms,arrive(P,L),I) :-\n   occurred(arrive(P,L),rooms,I),\n   not occurred(viol(arrive(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of arrive(P,L) terminates ['perm', ['enter', ['P', 'L']]] if ['revise', []]\n%\nterminated(perm(enter(P,L)),rooms,arrive(P,L),I) :-\n   occurred(arrive(P,L),rooms,I),\n   not occurred(viol(arrive(P,L)),rooms,I),\n   holdsat(live(rooms),rooms,_create_,I),inst(rooms),\n   holdsat(revise,rooms,_,I),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% noninertial rules\n%\n%\n% Translation of non_vip_in_vip_room(L) when ['and', ['and', ['vip_room', ['L']], ['in_room', ['P', 'L']]], ['not', ['is_vip', ['P']]]]\nholdsat(non_vip_in_vip_room(L),rooms,nif,I) :-\n   holdsat(vip_room(L),rooms,_,I),\n   holdsat(in_room(P,L),rooms,_,I),\n   not\n   holdsat(is_vip(P),rooms,_,I),\n   location(L),\n   person(P),\n   inst(rooms), instant(I).\n%\n% Translation of vip_in_room(L) when ['and', ['in_room', ['P', 'L']], ['is_vip', ['P']]]\nholdsat(vip_in_room(L),rooms,nif,I) :-\n   holdsat(in_room(P,L),rooms,_,I),\n   holdsat(is_vip(P),rooms,_,I),\n   location(L),\n   person(P),\n   inst(rooms), instant(I).\n%\n% Translation of capacityExceededViol(L) when ['and', ['and', ['and', ['occupancy', ['L', 'X']], ['max', ['L', 'Y']]], ['bigger', ['X', 'Y']]], ['revise', []]]\nholdsat(capacityExceededViol(L),rooms,nif,I) :-\n   holdsat(occupancy(L,X),rooms,_,I),\n   holdsat(max(L,Y),rooms,_,I),\n   holdsat(bigger(X,Y),rooms,_,I),\n   holdsat(revise,rooms,_,I),\n   location(L),\n   number(X),\n   number(Y),\n   inst(rooms), instant(I).\n%\n% Translation of typeCount(L,R,N) when ['and', ['and', ['aggrCount', ['N']], ['in_room', ['P', 'L']]], ['role', ['P', 'R']]]\nholdsat(typeCount(L,R,N),rooms,nif,I) :-\n N = #count {P: \n holdsat(in_room(P,L),rooms,_,I),\n holdsat(role(P,R),rooms,_,I) },\n   number(N),\n   role(R),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of occupancy(L,N) when ['and', ['aggrCount', ['N']], ['in_room', ['P', 'L']]]\nholdsat(occupancy(L,N),rooms,nif,I) :-\n N = #count {P: \n holdsat(in_room(P,L),rooms,_,I) },\n   number(N),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of potential_role_conflict(L) when ['and', ['potential_occupant_conflict', ['L']], ['typeCount', ['L', 'R', '2']]]\nholdsat(potential_role_conflict(L),rooms,nif,I) :-\n   holdsat(potential_occupant_conflict(L),rooms,_,I),\n   holdsat(typeCount(L,R,2),rooms,_,I),\n   location(L),\n   role(R),\n   inst(rooms), instant(I).\n%\n% Translation of potential_occupant_conflict(L) when ['occupancy', ['L', '3']]\nholdsat(potential_occupant_conflict(L),rooms,nif,I) :-\n   holdsat(occupancy(L,3),rooms,_,I),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of restrictAccess(P,L) when ['and', ['vip_room', ['L']], ['revise', []]]\nholdsat(restrictAccess(P,L),rooms,nif,I) :-\n   holdsat(vip_room(L),rooms,_,I),\n   holdsat(revise,rooms,_,I),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of permExit(P,L) when ['in_room', ['P', 'L']]\nholdsat(permExit(P,L),rooms,nif,I) :-\n   holdsat(in_room(P,L),rooms,_,I),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of permEntry(P,L) when ['and', ['not', ['in_some_room', ['P']]], ['not', ['restrictAccess', ['P', 'L']]]]\nholdsat(permEntry(P,L),rooms,nif,I) :-\n   not\n   holdsat(in_some_room(P),rooms,_,I),\n   not\n   holdsat(restrictAccess(P,L),rooms,_,I),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% Translation of in_some_room(P) when ['in_room', ['P', 'L']]\nholdsat(in_some_room(P),rooms,nif,I) :-\n   holdsat(in_room(P,L),rooms,_,I),\n   person(P),\n   location(L),\n   inst(rooms), instant(I).\n%\n% -------------------------------PART 3-------------------------------\n%\n%\n% initially\n%\n% no creation event\nholdsat(live(rooms),rooms,_create_,I) :- start(I), inst(rooms).\nholdsat(perm(null),rooms,_create_,I) :- start(I), inst(rooms).\nholdsat(pow(null),rooms,_create_,I) :- start(I), inst(rooms).\n% initially: perm(enter(P,L))\nholdsat(perm(enter(P,L)),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   person(P),\n   location(L),\n   inst(rooms), start(I).\n% initially: pow(enter(P,L))\nholdsat(pow(enter(P,L)),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   person(P),\n   location(L),\n   inst(rooms), start(I).\n% initially: perm(arrive(P,L))\nholdsat(perm(arrive(P,L)),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   person(P),\n   location(L),\n   inst(rooms), start(I).\n% initially: perm(deniedEntry(P,L))\nholdsat(perm(deniedEntry(P,L)),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   person(P),\n   location(L),\n   inst(rooms), start(I).\n% initially: perm(deniedExit(P,L))\nholdsat(perm(deniedExit(P,L)),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   person(P),\n   location(L),\n   inst(rooms), start(I).\n% initially: bigger(10,0)\nholdsat(bigger(10,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(10,1)\nholdsat(bigger(10,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(10,2)\nholdsat(bigger(10,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(10,3)\nholdsat(bigger(10,3),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(10,4)\nholdsat(bigger(10,4),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(10,5)\nholdsat(bigger(10,5),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(10,6)\nholdsat(bigger(10,6),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(10,7)\nholdsat(bigger(10,7),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(10,8)\nholdsat(bigger(10,8),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(10,9)\nholdsat(bigger(10,9),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(9,0)\nholdsat(bigger(9,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(9,1)\nholdsat(bigger(9,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(9,2)\nholdsat(bigger(9,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(9,3)\nholdsat(bigger(9,3),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(9,4)\nholdsat(bigger(9,4),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(9,5)\nholdsat(bigger(9,5),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(9,6)\nholdsat(bigger(9,6),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(9,7)\nholdsat(bigger(9,7),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(9,8)\nholdsat(bigger(9,8),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(8,0)\nholdsat(bigger(8,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(8,1)\nholdsat(bigger(8,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(8,2)\nholdsat(bigger(8,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(8,3)\nholdsat(bigger(8,3),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(8,4)\nholdsat(bigger(8,4),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(8,5)\nholdsat(bigger(8,5),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(8,6)\nholdsat(bigger(8,6),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(8,7)\nholdsat(bigger(8,7),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(7,0)\nholdsat(bigger(7,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(7,1)\nholdsat(bigger(7,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(7,2)\nholdsat(bigger(7,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(7,3)\nholdsat(bigger(7,3),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(7,4)\nholdsat(bigger(7,4),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(7,5)\nholdsat(bigger(7,5),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(7,6)\nholdsat(bigger(7,6),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(6,0)\nholdsat(bigger(6,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(6,1)\nholdsat(bigger(6,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(6,2)\nholdsat(bigger(6,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(6,3)\nholdsat(bigger(6,3),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(6,4)\nholdsat(bigger(6,4),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(6,5)\nholdsat(bigger(6,5),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(5,0)\nholdsat(bigger(5,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(5,1)\nholdsat(bigger(5,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(5,2)\nholdsat(bigger(5,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(5,3)\nholdsat(bigger(5,3),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(5,4)\nholdsat(bigger(5,4),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(3,0)\nholdsat(bigger(3,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(3,1)\nholdsat(bigger(3,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(3,2)\nholdsat(bigger(3,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(4,0)\nholdsat(bigger(4,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(4,1)\nholdsat(bigger(4,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(4,2)\nholdsat(bigger(4,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(4,3)\nholdsat(bigger(4,3),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(2,1)\nholdsat(bigger(2,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(2,0)\nholdsat(bigger(2,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: bigger(1,0)\nholdsat(bigger(1,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: equal(1,1)\nholdsat(equal(1,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: equal(2,2)\nholdsat(equal(2,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: equal(3,3)\nholdsat(equal(3,3),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: equal(4,4)\nholdsat(equal(4,4),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: equal(5,5)\nholdsat(equal(5,5),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: is_vip(oracle)\nholdsat(is_vip(oracle),rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n% initially: revise\nholdsat(revise,rooms,_create_,I) :- not holdsat(live(rooms),rooms),\n   inst(rooms), start(I).\n%\n% -------------------------------GROUNDING-------------------------------\n%\n% Person\n_typeNotDeclared :- not person(_).\n#program person(l).\nperson(l).\n\n% Location\n_typeNotDeclared :- not location(_).\n#program location(l).\nlocation(l).\n\n% Number\n_typeNotDeclared :- not number(_).\n#program number(l).\nnumber(l).\n\n% Role\n_typeNotDeclared :- not role(_).\n#program role(l).\nrole(l).\n\n%\n% End of file\n%\n"}]}
