{'bridge': [], 'institutions': [{'filename': '/workdir/roomsInst.ial', 'contents': 'institution rooms;\n\ntype Person;\ntype Role;\ntype Location;\ntype Number;\n\n\nexogenous event enter(Person,Location);\nexogenous event leave(Person,Location);\n\ninst event arrive(Person,Location);\ninst event exit(Person,Location);\n%inst event barred(Person,Location);\ninst event deniedEntry(Person,Location);\ninst event deniedExit(Person,Location);\n\nfluent role(Person,Role);\nfluent vip_room(Location);\nfluent is_vip(Person);\nfluent in_room(Person,Location);\nfluent max(Location,Number);\nfluent bigger(Number,Number);\nfluent equal(Number,Number);\n%fluent capacityExceededViol(Location);\nfluent aggrCount(Number);\nfluent revise;\n\nnoninertial fluent potential_occupant_conflict(Location);\nnoninertial fluent potential_role_conflict(Location);\n%noninertial fluent room_conflict(Location);\nnoninertial fluent permExit(Person,Location);\nnoninertial fluent permEntry(Person,Location);\nnoninertial fluent in_some_room(Person);\nnoninertial fluent occupancy(Location,Number);\nnoninertial fluent typeCount(Location,Role,Number);\n\nnoninertial fluent capacityExceededViol(Location);\nnoninertial fluent earlyBirdViol(Person,Location);\nnoninertial fluent roomTypeConflictViol(Location);\n\nnoninertial fluent restrictAccess(Person,Location);\n\nnoninertial fluent vip_in_room(Location);\nnoninertial fluent non_vip_in_vip_room(Location);\n\n\n\n%arrive is only generated if you are permitted to enter\nenter(P,L) generates arrive(P,L) if permEntry(P,L), revise;\n%enter(P,L) generates arrive(P,L) if permEntry(P,L),not vip_room(L),revise;\n\n\n\n%need it to learn \n%enter(P,L) generates arrive(P,L) if permEntry(P,L), vip_room(L),is_vip(P), revise;\n\nenter(P,L) generates deniedEntry(P,L) if not permEntry(P,L);\n\n%enter(P,L) generates restrictedAccess(P,L) if permEntry(P,L),vip_room(L),revise;\n%enter(P,L) generates restrictedAccess(P,L) if not arrive(P,L),revise;\n\n\n%a rule for barred entry when someone attempts to enter a vip room\n%enter(P,L) generates barred(P,L) if vip_room(L), not is_vip(P);\n\n%barred(P,L) initiates \n\n\narrive(P,L) initiates in_room(P,L) if revise;\narrive(P,L) initiates perm(leave(P,L));\narrive(P,L) initiates pow(leave(P,L));\narrive(P,L) initiates perm(exit(P,L));\n\n\narrive(P,L) terminates perm(enter(P,L)) if revise;\narrive(P,L) terminates pow(enter(P,L));\narrive(P,L) terminates perm(arrive(P,L));\n\n\n%earlyBirdViol(P,L) when occupancy(L,X), equal(X,1), in_room(P,L), revise;\n\n\nin_some_room(P) when in_room(P,L);\n\n% this prevents you from having permission to enter any room if you are already in one.\n%permEntry(P,L) when not in_some_room(P);\n\n%trying this our for the VIP room restriction\npermEntry(P,L) when not in_some_room(P), not restrictAccess(P,L);\n\n%permEntry(P,L) when not vip_room(P);\n\npermExit(P,L) when in_room(P,L); \n\nrestrictAccess(P,L) when vip_room(L), revise;  \n\n\nleave(P,L) generates exit(P,L) if permExit(P,L);\nleave(P,L) generates deniedExit(P,L) if not permExit(P,L);\n\nexit(P,L) initiates perm(enter(P,L));\nexit(P,L) initiates pow(enter(P,L));\nexit(P,L) initiates perm(arrive(P,L));\n\nexit(P,L) terminates perm(leave(P,L));\nexit(P,L) terminates pow(leave(P,L));\nexit(P,L) terminates perm(exit(P,L));\nexit(P,L) terminates in_room(P,L);\n\n\npotential_occupant_conflict(L) when occupancy(L,3);\n\n%potential_role_conflict(L) when potential_occupant_conflict(L), in_room(A1,L),in_room(A2,L),in_room(A3,L), role(A1,x), role(A2,y), role(A3,y), A1 != A2, A2 != A3, A1 != A3; \npotential_role_conflict(L) when potential_occupant_conflict(L), typeCount(L,R,2);\n\noccupancy(L,N) when aggrCount(N),in_room(P,L);\ntypeCount(L,R,N) when aggrCount(N),in_room(P,L), role(P,R);\n\n\ncapacityExceededViol(L) when occupancy(L,X), max(L,Y), bigger(X,Y), revise;\n%capacityExceededViol(L) when occupancy(L,X), max(L,Y), X>Y, revise;\n\n\n%room type conflict issue defined here when the occupancy is 2 and there is 1 of eahc role here\n%roomTypeConflictViol(L) when occupancy(L,2), typeCount(L,R,1), revise;\n\n%viol event initiates the viol fluent\n%capacityExceeded(L) initiates capacityExceededViol(L);\n\n%vip_in_room definition\nvip_in_room(L) when in_room(P,L), is_vip(P);\n\n%trying something for non_vip_entering_vip_room definition\n%non_vip_entering_vip_room(L) when vip_room(L), not is_vip(P);\n\n%alerting when a non_vip_in_vip_room definition\nnon_vip_in_vip_room(L) when vip_room(L), in_room(P,L), not is_vip(P);\n\ninitially perm(enter(P,L)), pow(enter(P,L)), perm(arrive(P,L)),perm(deniedEntry(P,L)),perm(deniedExit(P,L));\n%initially perm(restrictedAccess(P,L));\n%initially perm(barred(P,L));\n\ninitially bigger(10,0), bigger(10,1), bigger(10,2), bigger(10,3), bigger(10,4), bigger(10,5), bigger(10,6), bigger(10,7), bigger(10,8), bigger(10,9);\ninitially bigger(9,0), bigger(9,1), bigger(9,2), bigger(9,3), bigger(9,4), bigger(9,5), bigger(9,6), bigger(9,7), bigger(9,8);\ninitially bigger(8,0), bigger(8,1), bigger(8,2), bigger(8,3), bigger(8,4), bigger(8,5), bigger(8,6), bigger(8,7);\ninitially bigger(7,0), bigger(7,1), bigger(7,2), bigger(7,3), bigger(7,4), bigger(7,5), bigger(7,6);\ninitially bigger(6,0), bigger(6,1), bigger(6,2), bigger(6,3), bigger(6,4), bigger(6,5);\ninitially bigger(5,0), bigger(5,1), bigger(5,2), bigger(5,3), bigger(5,4);\ninitially bigger(3,0), bigger(3,1), bigger(3,2);\ninitially bigger(4,0), bigger(4,1), bigger(4,2), bigger(4,3);\ninitially bigger(2,1), bigger(2,0);\ninitially bigger(1,0);\ninitially equal(1,1), equal(2,2),equal(3,3),equal(4,4),equal(5,5);\n\n%initially max(room1,1), max(room2,1);\n%initially vip_room(room1), is_vip(oracle);\n\ninitially is_vip(oracle);\n\ninitially revise;'}]}
