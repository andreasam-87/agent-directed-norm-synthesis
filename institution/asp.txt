%
% -------------------------------PART 1-------------------------------
%
%
% Standard prelude for rooms
%
% Standard prelude now dealt with in InstalModel.
%
% Rules for Institution rooms
%
  ifluent(live(rooms), rooms).
  fluent(live(rooms), rooms).
  inst(rooms).
  :- not _preludeLoaded. 

%
% Exogenous events
% Event: leave (type: ex)
  event(leave(Person0,Location1)) :- person(Person0),location(Location1).
  evtype(leave(Person0,Location1),rooms,ex) :- person(Person0),location(Location1).
  evinst(leave(Person0,Location1),rooms) :- person(Person0),location(Location1).
  ifluent(pow(leave(Person0,Location1)),rooms) :- person(Person0),location(Location1).
  ifluent(perm(leave(Person0,Location1)),rooms) :- person(Person0),location(Location1).
  fluent(pow(leave(Person0,Location1)),rooms) :- person(Person0),location(Location1).
  fluent(perm(leave(Person0,Location1)),rooms) :- person(Person0),location(Location1).
  event(viol(leave(Person0,Location1))) :- person(Person0),location(Location1).
  evtype(viol(leave(Person0,Location1)), rooms, viol) :- person(Person0),location(Location1).
  evinst(viol(leave(Person0,Location1)),rooms) :- person(Person0),location(Location1).
% Event: enter (type: ex)
  event(enter(Person0,Location1)) :- person(Person0),location(Location1).
  evtype(enter(Person0,Location1),rooms,ex) :- person(Person0),location(Location1).
  evinst(enter(Person0,Location1),rooms) :- person(Person0),location(Location1).
  ifluent(pow(enter(Person0,Location1)),rooms) :- person(Person0),location(Location1).
  ifluent(perm(enter(Person0,Location1)),rooms) :- person(Person0),location(Location1).
  fluent(pow(enter(Person0,Location1)),rooms) :- person(Person0),location(Location1).
  fluent(perm(enter(Person0,Location1)),rooms) :- person(Person0),location(Location1).
  event(viol(enter(Person0,Location1))) :- person(Person0),location(Location1).
  evtype(viol(enter(Person0,Location1)), rooms, viol) :- person(Person0),location(Location1).
  evinst(viol(enter(Person0,Location1)),rooms) :- person(Person0),location(Location1).
%
% null event for unknown events
% Event: null (type: ex)
  event(null).
  evtype(null,rooms,ex).
  evinst(null,rooms).
  ifluent(pow(null),rooms).
  ifluent(perm(null),rooms).
  fluent(pow(null),rooms).
  fluent(perm(null),rooms).
  event(viol(null)).
  evtype(viol(null),rooms,viol).
  evinst(viol(null),rooms).
% Institutional events
% Event: deniedExit (type: in)
  event(deniedExit(Person0,Location1)) :- person(Person0),location(Location1).
  evtype(deniedExit(Person0,Location1),rooms,inst) :- person(Person0),location(Location1).
  evinst(deniedExit(Person0,Location1),rooms) :- person(Person0),location(Location1).
  ifluent(perm(deniedExit(Person0,Location1)),rooms) :- person(Person0),location(Location1).
  fluent(perm(deniedExit(Person0,Location1)),rooms) :- person(Person0),location(Location1).
  event(viol(deniedExit(Person0,Location1))) :- person(Person0),location(Location1).
  evtype(viol(deniedExit(Person0,Location1)),rooms,viol) :- person(Person0),location(Location1).
  evinst(viol(deniedExit(Person0,Location1)),rooms) :- person(Person0),location(Location1).
% Event: deniedEntry (type: in)
  event(deniedEntry(Person0,Location1)) :- person(Person0),location(Location1).
  evtype(deniedEntry(Person0,Location1),rooms,inst) :- person(Person0),location(Location1).
  evinst(deniedEntry(Person0,Location1),rooms) :- person(Person0),location(Location1).
  ifluent(perm(deniedEntry(Person0,Location1)),rooms) :- person(Person0),location(Location1).
  fluent(perm(deniedEntry(Person0,Location1)),rooms) :- person(Person0),location(Location1).
  event(viol(deniedEntry(Person0,Location1))) :- person(Person0),location(Location1).
  evtype(viol(deniedEntry(Person0,Location1)),rooms,viol) :- person(Person0),location(Location1).
  evinst(viol(deniedEntry(Person0,Location1)),rooms) :- person(Person0),location(Location1).
% Event: exit (type: in)
  event(exit(Person0,Location1)) :- person(Person0),location(Location1).
  evtype(exit(Person0,Location1),rooms,inst) :- person(Person0),location(Location1).
  evinst(exit(Person0,Location1),rooms) :- person(Person0),location(Location1).
  ifluent(perm(exit(Person0,Location1)),rooms) :- person(Person0),location(Location1).
  fluent(perm(exit(Person0,Location1)),rooms) :- person(Person0),location(Location1).
  event(viol(exit(Person0,Location1))) :- person(Person0),location(Location1).
  evtype(viol(exit(Person0,Location1)),rooms,viol) :- person(Person0),location(Location1).
  evinst(viol(exit(Person0,Location1)),rooms) :- person(Person0),location(Location1).
% Event: arrive (type: in)
  event(arrive(Person0,Location1)) :- person(Person0),location(Location1).
  evtype(arrive(Person0,Location1),rooms,inst) :- person(Person0),location(Location1).
  evinst(arrive(Person0,Location1),rooms) :- person(Person0),location(Location1).
  ifluent(perm(arrive(Person0,Location1)),rooms) :- person(Person0),location(Location1).
  fluent(perm(arrive(Person0,Location1)),rooms) :- person(Person0),location(Location1).
  event(viol(arrive(Person0,Location1))) :- person(Person0),location(Location1).
  evtype(viol(arrive(Person0,Location1)),rooms,viol) :- person(Person0),location(Location1).
  evinst(viol(arrive(Person0,Location1)),rooms) :- person(Person0),location(Location1).
%
% Violation events
%
%
% Creation events
%
%
% Dissolution events
%
%
% dissolve events
%
%
% inertial fluents
%
ifluent(in_room(Person0,Location1),rooms) :-
  person(Person0),location(Location1).
fluent(in_room(Person0,Location1),rooms) :-
  person(Person0),location(Location1).

ifluent(role(Person0,Role1),rooms) :-
  person(Person0),role(Role1).
fluent(role(Person0,Role1),rooms) :-
  person(Person0),role(Role1).

ifluent(revise,rooms) :-
  true.
fluent(revise,rooms) :-
  true.

ifluent(equal(Number0,Number1),rooms) :-
  number(Number0),number(Number1).
fluent(equal(Number0,Number1),rooms) :-
  number(Number0),number(Number1).

ifluent(vip_room(Location0),rooms) :-
  location(Location0).
fluent(vip_room(Location0),rooms) :-
  location(Location0).

ifluent(is_vip(Person0),rooms) :-
  person(Person0).
fluent(is_vip(Person0),rooms) :-
  person(Person0).

ifluent(aggrCount(Number0),rooms) :-
  number(Number0).
fluent(aggrCount(Number0),rooms) :-
  number(Number0).

ifluent(bigger(Number0,Number1),rooms) :-
  number(Number0),number(Number1).
fluent(bigger(Number0,Number1),rooms) :-
  number(Number0),number(Number1).

ifluent(max(Location0,Number1),rooms) :-
  location(Location0),number(Number1).
fluent(max(Location0,Number1),rooms) :-
  location(Location0),number(Number1).

%
% noninertial fluents
%
nifluent(vip_in_room(Location0), rooms) :-
  location(Location0).
fluent(vip_in_room(Location0), rooms) :-
  location(Location0).

nifluent(typeCount(Location0,Role1,Number2), rooms) :-
  location(Location0),role(Role1),number(Number2).
fluent(typeCount(Location0,Role1,Number2), rooms) :-
  location(Location0),role(Role1),number(Number2).

nifluent(roomTypeConflictViol(Location0), rooms) :-
  location(Location0).
fluent(roomTypeConflictViol(Location0), rooms) :-
  location(Location0).

nifluent(permExit(Person0,Location1), rooms) :-
  person(Person0),location(Location1).
fluent(permExit(Person0,Location1), rooms) :-
  person(Person0),location(Location1).

nifluent(capacityExceededViol(Location0), rooms) :-
  location(Location0).
fluent(capacityExceededViol(Location0), rooms) :-
  location(Location0).

nifluent(potential_role_conflict(Location0), rooms) :-
  location(Location0).
fluent(potential_role_conflict(Location0), rooms) :-
  location(Location0).

nifluent(earlyBirdViol(Person0,Location1), rooms) :-
  person(Person0),location(Location1).
fluent(earlyBirdViol(Person0,Location1), rooms) :-
  person(Person0),location(Location1).

nifluent(potential_occupant_conflict(Location0), rooms) :-
  location(Location0).
fluent(potential_occupant_conflict(Location0), rooms) :-
  location(Location0).

nifluent(in_some_room(Person0), rooms) :-
  person(Person0).
fluent(in_some_room(Person0), rooms) :-
  person(Person0).

nifluent(occupancy(Location0,Number1), rooms) :-
  location(Location0),number(Number1).
fluent(occupancy(Location0,Number1), rooms) :-
  location(Location0),number(Number1).

nifluent(restrictAccess(Person0,Location1), rooms) :-
  person(Person0),location(Location1).
fluent(restrictAccess(Person0,Location1), rooms) :-
  person(Person0),location(Location1).

nifluent(permEntry(Person0,Location1), rooms) :-
  person(Person0),location(Location1).
fluent(permEntry(Person0,Location1), rooms) :-
  person(Person0),location(Location1).

nifluent(non_vip_in_vip_room(Location0), rooms) :-
  location(Location0).
fluent(non_vip_in_vip_room(Location0), rooms) :-
  location(Location0).

%
% violation fluents (to be implemented)

%
% obligation fluents
%
%
% -------------------------------PART 2-------------------------------
%
%
% generate rules
%
%
% Translation of leave(P,L) generates deniedExit(P,L) if ['not', ['permExit', ['P', 'L']]] in 
occurred(deniedExit(P,L),rooms,I) :- occurred(leave(P,L),rooms,I),not occurred(viol(leave(P,L)),rooms,I),

   not
   holdsat(permExit(P,L),rooms,_,I),
   person(P),
   location(L),
   inst(rooms), instant(I).
%
% Translation of leave(P,L) generates exit(P,L) if ['permExit', ['P', 'L']] in 
occurred(exit(P,L),rooms,I) :- occurred(leave(P,L),rooms,I),not occurred(viol(leave(P,L)),rooms,I),

   holdsat(permExit(P,L),rooms,_,I),
   person(P),
   location(L),
   inst(rooms), instant(I).
%
% Translation of enter(P,L) generates deniedEntry(P,L) if ['not', ['permEntry', ['P', 'L']]] in 
occurred(deniedEntry(P,L),rooms,I) :- occurred(enter(P,L),rooms,I),not occurred(viol(enter(P,L)),rooms,I),

   not
   holdsat(permEntry(P,L),rooms,_,I),
   person(P),
   location(L),
   inst(rooms), instant(I).
%
% Translation of enter(P,L) generates arrive(P,L) if ['and', ['permEntry', ['P', 'L']], ['revise', []]] in 
occurred(arrive(P,L),rooms,I) :- occurred(enter(P,L),rooms,I),not occurred(viol(enter(P,L)),rooms,I),

   holdsat(permEntry(P,L),rooms,_,I),
   holdsat(revise,rooms,_,I),
   person(P),
   location(L),
   inst(rooms), instant(I).
%
% initiate rules
%
%
% Translation of exit(P,L) initiates ['perm', ['arrive', ['P', 'L']]] if []
%
initiated(perm(arrive(P,L)),rooms,exit(P,L),I) :-
   occurred(exit(P,L),rooms,I),
   not occurred(viol(exit(P,L)),rooms,I),
   holdsat(live(rooms),rooms,_create_,I),inst(rooms),
   person(P),
   location(L),
   inst(rooms), instant(I).
%
% Translation of exit(P,L) initiates ['pow', ['enter', ['P', 'L']]] if []
%
initiated(pow(enter(P,L)),rooms,exit(P,L),I) :-
   occurred(exit(P,L),rooms,I),
   not occurred(viol(exit(P,L)),rooms,I),
   holdsat(live(rooms),rooms,_create_,I),inst(rooms),
   person(P),
   location(L),
   inst(rooms), instant(I).
%
% Translation of exit(P,L) initiates ['perm', ['enter', ['P', 'L']]] if []
%
initiated(perm(enter(P,L)),rooms,exit(P,L),I) :-
   occurred(exit(P,L),rooms,I),
   not occurred(viol(exit(P,L)),rooms,I),
   holdsat(live(rooms),rooms,_create_,I),inst(rooms),
   person(P),
   location(L),
   inst(rooms), instant(I).
%
% Translation of arrive(P,L) initiates ['perm', ['exit', ['P', 'L']]] if []
%
initiated(perm(exit(P,L)),rooms,arrive(P,L),I) :-
   occurred(arrive(P,L),rooms,I),
   not occurred(viol(arrive(P,L)),rooms,I),
   holdsat(live(rooms),rooms,_create_,I),inst(rooms),
   person(P),
   location(L),
   inst(rooms), instant(I).
%
% Translation of arrive(P,L) initiates ['pow', ['leave', ['P', 'L']]] if []
%
initiated(pow(leave(P,L)),rooms,arrive(P,L),I) :-
   occurred(arrive(P,L),rooms,I),
   not occurred(viol(arrive(P,L)),rooms,I),
   holdsat(live(rooms),rooms,_create_,I),inst(rooms),
   person(P),
   location(L),
   inst(rooms), instant(I).
%
% Translation of arrive(P,L) initiates ['perm', ['leave', ['P', 'L']]] if []
%
initiated(perm(leave(P,L)),rooms,arrive(P,L),I) :-
   occurred(arrive(P,L),rooms,I),
   not occurred(viol(arrive(P,L)),rooms,I),
   holdsat(live(rooms),rooms,_create_,I),inst(rooms),
   person(P),
   location(L),
   inst(rooms), instant(I).
%
% Translation of arrive(P,L) initiates ['in_room', ['P', 'L']] if ['revise', []]
%
initiated(in_room(P,L),rooms,arrive(P,L),I) :-
   occurred(arrive(P,L),rooms,I),
   not occurred(viol(arrive(P,L)),rooms,I),
   holdsat(live(rooms),rooms,_create_,I),inst(rooms),
   holdsat(revise,rooms,_,I),
   person(P),
   location(L),
   inst(rooms), instant(I).
%
% terminate rules
%
%
% Translation of exit(P,L) terminates ['in_room', ['P', 'L']] if []
%
terminated(in_room(P,L),rooms,exit(P,L),I) :-
   occurred(exit(P,L),rooms,I),
   not occurred(viol(exit(P,L)),rooms,I),
   holdsat(live(rooms),rooms,_create_,I),inst(rooms),
   person(P),
   location(L),
   inst(rooms), instant(I).
%
% Translation of exit(P,L) terminates ['perm', ['exit', ['P', 'L']]] if []
%
terminated(perm(exit(P,L)),rooms,exit(P,L),I) :-
   occurred(exit(P,L),rooms,I),
   not occurred(viol(exit(P,L)),rooms,I),
   holdsat(live(rooms),rooms,_create_,I),inst(rooms),
   person(P),
   location(L),
   inst(rooms), instant(I).
%
% Translation of exit(P,L) terminates ['pow', ['leave', ['P', 'L']]] if []
%
terminated(pow(leave(P,L)),rooms,exit(P,L),I) :-
   occurred(exit(P,L),rooms,I),
   not occurred(viol(exit(P,L)),rooms,I),
   holdsat(live(rooms),rooms,_create_,I),inst(rooms),
   person(P),
   location(L),
   inst(rooms), instant(I).
%
% Translation of exit(P,L) terminates ['perm', ['leave', ['P', 'L']]] if []
%
terminated(perm(leave(P,L)),rooms,exit(P,L),I) :-
   occurred(exit(P,L),rooms,I),
   not occurred(viol(exit(P,L)),rooms,I),
   holdsat(live(rooms),rooms,_create_,I),inst(rooms),
   person(P),
   location(L),
   inst(rooms), instant(I).
%
% Translation of arrive(P,L) terminates ['perm', ['arrive', ['P', 'L']]] if []
%
terminated(perm(arrive(P,L)),rooms,arrive(P,L),I) :-
   occurred(arrive(P,L),rooms,I),
   not occurred(viol(arrive(P,L)),rooms,I),
   holdsat(live(rooms),rooms,_create_,I),inst(rooms),
   person(P),
   location(L),
   inst(rooms), instant(I).
%
% Translation of arrive(P,L) terminates ['pow', ['enter', ['P', 'L']]] if []
%
terminated(pow(enter(P,L)),rooms,arrive(P,L),I) :-
   occurred(arrive(P,L),rooms,I),
   not occurred(viol(arrive(P,L)),rooms,I),
   holdsat(live(rooms),rooms,_create_,I),inst(rooms),
   person(P),
   location(L),
   inst(rooms), instant(I).
%
% Translation of arrive(P,L) terminates ['perm', ['enter', ['P', 'L']]] if ['revise', []]
%
terminated(perm(enter(P,L)),rooms,arrive(P,L),I) :-
   occurred(arrive(P,L),rooms,I),
   not occurred(viol(arrive(P,L)),rooms,I),
   holdsat(live(rooms),rooms,_create_,I),inst(rooms),
   holdsat(revise,rooms,_,I),
   person(P),
   location(L),
   inst(rooms), instant(I).
%
% noninertial rules
%
%
% Translation of non_vip_in_vip_room(L) when ['and', ['and', ['vip_room', ['L']], ['in_room', ['P', 'L']]], ['not', ['is_vip', ['P']]]]
holdsat(non_vip_in_vip_room(L),rooms,nif,I) :-
   holdsat(vip_room(L),rooms,_,I),
   holdsat(in_room(P,L),rooms,_,I),
   not
   holdsat(is_vip(P),rooms,_,I),
   location(L),
   person(P),
   inst(rooms), instant(I).
%
% Translation of vip_in_room(L) when ['and', ['in_room', ['P', 'L']], ['is_vip', ['P']]]
holdsat(vip_in_room(L),rooms,nif,I) :-
   holdsat(in_room(P,L),rooms,_,I),
   holdsat(is_vip(P),rooms,_,I),
   location(L),
   person(P),
   inst(rooms), instant(I).
%
% Translation of capacityExceededViol(L) when ['and', ['and', ['and', ['occupancy', ['L', 'X']], ['max', ['L', 'Y']]], ['bigger', ['X', 'Y']]], ['revise', []]]
holdsat(capacityExceededViol(L),rooms,nif,I) :-
   holdsat(occupancy(L,X),rooms,_,I),
   holdsat(max(L,Y),rooms,_,I),
   holdsat(bigger(X,Y),rooms,_,I),
   holdsat(revise,rooms,_,I),
   location(L),
   number(X),
   number(Y),
   inst(rooms), instant(I).
%
% Translation of typeCount(L,R,N) when ['and', ['and', ['aggrCount', ['N']], ['in_room', ['P', 'L']]], ['role', ['P', 'R']]]
holdsat(typeCount(L,R,N),rooms,nif,I) :-
 N = #count {P: 
 holdsat(in_room(P,L),rooms,_,I),
 holdsat(role(P,R),rooms,_,I) },
   number(N),
   role(R),
   location(L),
   inst(rooms), instant(I).
%
% Translation of occupancy(L,N) when ['and', ['aggrCount', ['N']], ['in_room', ['P', 'L']]]
holdsat(occupancy(L,N),rooms,nif,I) :-
 N = #count {P: 
 holdsat(in_room(P,L),rooms,_,I) },
   number(N),
   location(L),
   inst(rooms), instant(I).
%
% Translation of potential_role_conflict(L) when ['and', ['potential_occupant_conflict', ['L']], ['typeCount', ['L', 'R', '2']]]
holdsat(potential_role_conflict(L),rooms,nif,I) :-
   holdsat(potential_occupant_conflict(L),rooms,_,I),
   holdsat(typeCount(L,R,2),rooms,_,I),
   location(L),
   role(R),
   inst(rooms), instant(I).
%
% Translation of potential_occupant_conflict(L) when ['occupancy', ['L', '3']]
holdsat(potential_occupant_conflict(L),rooms,nif,I) :-
   holdsat(occupancy(L,3),rooms,_,I),
   location(L),
   inst(rooms), instant(I).
%
% Translation of restrictAccess(P,L) when ['and', ['vip_room', ['L']], ['revise', []]]
holdsat(restrictAccess(P,L),rooms,nif,I) :-
   holdsat(vip_room(L),rooms,_,I),
   holdsat(revise,rooms,_,I),
   person(P),
   location(L),
   inst(rooms), instant(I).
%
% Translation of permExit(P,L) when ['in_room', ['P', 'L']]
holdsat(permExit(P,L),rooms,nif,I) :-
   holdsat(in_room(P,L),rooms,_,I),
   person(P),
   location(L),
   inst(rooms), instant(I).
%
% Translation of permEntry(P,L) when ['and', ['not', ['in_some_room', ['P']]], ['not', ['restrictAccess', ['P', 'L']]]]
holdsat(permEntry(P,L),rooms,nif,I) :-
   not
   holdsat(in_some_room(P),rooms,_,I),
   not
   holdsat(restrictAccess(P,L),rooms,_,I),
   person(P),
   location(L),
   inst(rooms), instant(I).
%
% Translation of in_some_room(P) when ['in_room', ['P', 'L']]
holdsat(in_some_room(P),rooms,nif,I) :-
   holdsat(in_room(P,L),rooms,_,I),
   person(P),
   location(L),
   inst(rooms), instant(I).
%
% -------------------------------PART 3-------------------------------
%
%
% initially
%
% no creation event
holdsat(live(rooms),rooms,_create_,I) :- start(I), inst(rooms).
holdsat(perm(null),rooms,_create_,I) :- start(I), inst(rooms).
holdsat(pow(null),rooms,_create_,I) :- start(I), inst(rooms).
% initially: perm(enter(P,L))
holdsat(perm(enter(P,L)),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   person(P),
   location(L),
   inst(rooms), start(I).
% initially: pow(enter(P,L))
holdsat(pow(enter(P,L)),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   person(P),
   location(L),
   inst(rooms), start(I).
% initially: perm(arrive(P,L))
holdsat(perm(arrive(P,L)),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   person(P),
   location(L),
   inst(rooms), start(I).
% initially: perm(deniedEntry(P,L))
holdsat(perm(deniedEntry(P,L)),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   person(P),
   location(L),
   inst(rooms), start(I).
% initially: perm(deniedExit(P,L))
holdsat(perm(deniedExit(P,L)),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   person(P),
   location(L),
   inst(rooms), start(I).
% initially: bigger(10,0)
holdsat(bigger(10,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(10,1)
holdsat(bigger(10,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(10,2)
holdsat(bigger(10,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(10,3)
holdsat(bigger(10,3),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(10,4)
holdsat(bigger(10,4),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(10,5)
holdsat(bigger(10,5),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(10,6)
holdsat(bigger(10,6),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(10,7)
holdsat(bigger(10,7),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(10,8)
holdsat(bigger(10,8),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(10,9)
holdsat(bigger(10,9),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(9,0)
holdsat(bigger(9,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(9,1)
holdsat(bigger(9,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(9,2)
holdsat(bigger(9,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(9,3)
holdsat(bigger(9,3),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(9,4)
holdsat(bigger(9,4),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(9,5)
holdsat(bigger(9,5),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(9,6)
holdsat(bigger(9,6),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(9,7)
holdsat(bigger(9,7),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(9,8)
holdsat(bigger(9,8),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(8,0)
holdsat(bigger(8,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(8,1)
holdsat(bigger(8,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(8,2)
holdsat(bigger(8,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(8,3)
holdsat(bigger(8,3),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(8,4)
holdsat(bigger(8,4),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(8,5)
holdsat(bigger(8,5),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(8,6)
holdsat(bigger(8,6),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(8,7)
holdsat(bigger(8,7),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(7,0)
holdsat(bigger(7,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(7,1)
holdsat(bigger(7,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(7,2)
holdsat(bigger(7,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(7,3)
holdsat(bigger(7,3),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(7,4)
holdsat(bigger(7,4),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(7,5)
holdsat(bigger(7,5),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(7,6)
holdsat(bigger(7,6),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(6,0)
holdsat(bigger(6,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(6,1)
holdsat(bigger(6,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(6,2)
holdsat(bigger(6,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(6,3)
holdsat(bigger(6,3),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(6,4)
holdsat(bigger(6,4),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(6,5)
holdsat(bigger(6,5),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(5,0)
holdsat(bigger(5,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(5,1)
holdsat(bigger(5,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(5,2)
holdsat(bigger(5,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(5,3)
holdsat(bigger(5,3),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(5,4)
holdsat(bigger(5,4),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(3,0)
holdsat(bigger(3,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(3,1)
holdsat(bigger(3,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(3,2)
holdsat(bigger(3,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(4,0)
holdsat(bigger(4,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(4,1)
holdsat(bigger(4,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(4,2)
holdsat(bigger(4,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(4,3)
holdsat(bigger(4,3),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(2,1)
holdsat(bigger(2,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(2,0)
holdsat(bigger(2,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: bigger(1,0)
holdsat(bigger(1,0),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: equal(1,1)
holdsat(equal(1,1),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: equal(2,2)
holdsat(equal(2,2),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: equal(3,3)
holdsat(equal(3,3),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: equal(4,4)
holdsat(equal(4,4),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: equal(5,5)
holdsat(equal(5,5),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: is_vip(oracle)
holdsat(is_vip(oracle),rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
% initially: revise
holdsat(revise,rooms,_create_,I) :- not holdsat(live(rooms),rooms),
   inst(rooms), start(I).
%
% -------------------------------GROUNDING-------------------------------
%
% Person
_typeNotDeclared :- not person(_).
#program person(l).
person(l).

% Location
_typeNotDeclared :- not location(_).
#program location(l).
location(l).

% Number
_typeNotDeclared :- not number(_).
#program number(l).
number(l).

% Role
_typeNotDeclared :- not role(_).
#program role(l).
role(l).

%
% End of file
%

