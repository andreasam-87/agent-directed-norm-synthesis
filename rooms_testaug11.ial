institution rooms;

type Person;
type Role;
type Location;
type Number;


exogenous event enter(Person,Location);
exogenous event leave(Person,Location);

inst event arrive(Person,Location);
inst event exit(Person,Location);
inst event barred(Person,Location);
inst event deniedEntry(Person,Location);
inst event deniedExit(Person,Location);

%violation event capacityExceeded(Location);

fluent role(Person,Role);
fluent in_room(Person,Location);
fluent max(Location,Number);
fluent min(Location,Number);
fluent addone(Number,Number);
fluent lessone(Number,Number);
fluent smaller(Number,Number);
fluent bigger(Number,Number);
fluent equal(Number,Number);
%fluent capacityExceededViol(Location);
fluent aggrCount(Number);
fluent id(Number);


noninertial fluent potential_occupant_conflict(Location);
noninertial fluent potential_role_conflict(Location);
noninertial fluent room_conflict(Location);
noninertial fluent permExit(Person,Location);
noninertial fluent permEntry(Person,Location);
noninertial fluent in_some_room(Person);
noninertial fluent occupancy(Location,Number);
noninertial fluent typeCount(Location,Role,Number);

noninertial fluent capacityExceededViol(Location);


%arrive is only generated if you are permitted to enter
enter(P,L) generates arrive(P,L) if permEntry(P,L);
enter(P,L) generates deniedEntry(P,L) if not permEntry(P,L);


arrive(P,L) initiates in_room(P,L);
arrive(P,L) initiates perm(leave(P,L));
arrive(P,L) initiates pow(leave(P,L));
arrive(P,L) initiates perm(exit(P,L));


arrive(P,L) terminates perm(enter(P,L));
arrive(P,L) terminates pow(enter(P,L));
arrive(P,L) terminates perm(arrive(P,L));



in_some_room(P) when in_room(P,L);

% this prevents you from having permission to enter any room if you are already in one.
permEntry(P,L) when not in_some_room(P); 

permExit(P,L) when in_room(P,L); 


leave(P,L) generates exit(P,L) if permExit(P,L);
leave(P,L) generates deniedExit(P,L) if not permExit(P,L);

exit(P,L) initiates perm(enter(P,L));
exit(P,L) initiates pow(enter(P,L));
exit(P,L) initiates perm(arrive(P,L));

exit(P,L) terminates perm(leave(P,L));
exit(P,L) terminates pow(leave(P,L));
exit(P,L) terminates perm(exit(P,L));
exit(P,L) terminates in_room(P,L);


potential_occupant_conflict(L) when occupancy(L,3);

%potential_role_conflict(L) when potential_occupant_conflict(L), in_room(A1,L),in_room(A2,L),in_room(A3,L), role(A1,x), role(A2,y), role(A3,y), A1 != A2, A2 != A3, A1 != A3; 
potential_role_conflict(L) when potential_occupant_conflict(L), typeCount(L,R,2);

occupancy(L,N) when aggrCount(N),in_room(P,L);
typeCount(L,R,N) when aggrCount(N),in_room(P,L), role(P,R);

capacityExceededViol(L) when occupancy(L,X), max(L,Y), bigger(X,Y);

%room conflict issue defined here when the occupancy is 2 and there is 1 of eahc role here
room_conflict(L) when occupancy(L,2), typeCount(L,R,1);

%viol event initiates the viol fluent
%capacityExceeded(L) initiates capacityExceededViol(L);


initially perm(enter(P,L)), pow(enter(P,L)), perm(arrive(P,L)),perm(deniedEntry(P,L)),perm(deniedExit(P,L));

initially addone(0,1), addone(1,2), addone(2,3), addone(3,4), addone(4,5);
initially lessone(1,0), lessone(2,1), lessone(3,2), lessone(4,3), lessone(5,4);
initially smaller(0,5), smaller(1,5), smaller(2,5), smaller(3,5), smaller(4,5);
initially smaller(0,3), smaller(1,3), smaller(2,3);
initially bigger(5,0), bigger(5,1), bigger(5,2), bigger(5,3), bigger(5,4);
initially bigger(3,0), bigger(3,1), bigger(3,2);
initially bigger(4,0), bigger(4,1), bigger(4,2), bigger(4,3);
initially bigger(2,1), bigger(2,0);
initially equal(1,1), equal(2,2),equal(3,3),equal(4,4),equal(5,5);

initially max(room1,2), max(room2,1);